<?php
namespace App\Admin;

use App\Entity\Transaction;
use App\Form\EditCustomizeForm;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Route\RouteCollectionInterface;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Doctrine\Inflector\InflectorFactory;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Sonata\AdminBundle\Admin\AdminInterface;
use Sonata\AdminBundle\Admin\Pool;
use Sonata\AdminBundle\Bridge\Exporter\AdminExporter;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Sonata\AdminBundle\Exception\BadRequestParamHttpException;
use Sonata\AdminBundle\Exception\LockException;
use Sonata\AdminBundle\Exception\ModelManagerException;
use Sonata\AdminBundle\Exception\ModelManagerThrowable;
use Sonata\AdminBundle\Form\FormErrorIteratorToConstraintViolationList;
use Sonata\AdminBundle\Model\AuditManagerInterface;
use Sonata\AdminBundle\Request\AdminFetcherInterface;
use Sonata\AdminBundle\Templating\TemplateRegistryInterface;
use Sonata\AdminBundle\Util\AdminAclUserManagerInterface;
use Sonata\AdminBundle\Util\AdminObjectAclData;
use Sonata\AdminBundle\Util\AdminObjectAclManipulator;
use Sonata\Exporter\ExporterInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormRenderer;
use Symfony\Component\Form\FormView;
use Symfony\Component\HttpFoundation\InputBag;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\ParameterBag;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\PropertyAccess\PropertyAccess;
use Symfony\Component\PropertyAccess\PropertyPath;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use Twig\Environment;


class TransactionAdmin extends AbstractAdmin
{

    
    protected function getAccessMapping(): array
    {
        $parent = parent::getAccessMapping();
        $current = ['customize'=>'customize'];
        return array_merge($parent,$current); // TODO: Change the autogenerated stub
    }

    protected function configureFormOptions(array &$formOptions): void
    {
        parent::configureFormOptions($formOptions); // TODO: Change the autogenerated stub
        //dd(&$formOptions);
      
    }

    protected function configureRoutes(RouteCollectionInterface $collection): void
    {
        $collection
            ->add('clone', $this->getRouterIdParameter().'/clone')
        ->add('customize', $this->getRouterIdParameter().'/customize');
    }

    protected function configureFormFields(FormMapper $form): void
    {
        $form->add('reference',TextType::class);
        $form->add('accountNumber',TextType::class);
        $form->add('accountName',TextType::class);
        $form->add('amount',MoneyType::class);
    }

    protected function configureDatagridFilters(DatagridMapper $datagrid): void
    {
        $datagrid->add('reference');
        $datagrid->add('accountNumber');
    }

    protected function configureListFields(ListMapper $list): void
    {
        $list->addIdentifier('reference')
        ; 
        $list->add('accountNumber');
        $list->add('accountName');
        $list->add('amount')->add(ListMapper::NAME_ACTIONS, ListMapper::TYPE_ACTIONS, [
            'actions' => [
                'show' => [],
                'edit' => [],
                'delete' => [],
                'clone' => ['template' => 'CRUD/list__action_clone.html.twig'],
                'customize' => ['template' => 'CRUD/list__action_customize.html.twig']
            ]
            ]);
    }

    protected function configureShowFields(ShowMapper $show): void
    {
        //$show->add('name');
        $show->add('reference');
    }

    public function toString(object $object): string
    {
        return $object instanceof Transaction ? $object->getReference() : 'Transaction';
    }

    public function  getEditCustomForm()
    {
        /*
        if ($this->loaded['form']) {
            return $this->form;
        }*/

        //$this->loaded['form'] = true;

        $formBuilder = $this->getFormBuilder();
        $formBuilder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event): void {
            /** @phpstan-var T $data */
            $data = $event->getData();
            $this->preValidate($data);
        }, 100);

        $this->form = $formBuilder->getForm()->remove("accountNumber")
        ->remove("accountName");

        return $this->form;
    /* $form =  $this->container->get('form.factory')
            ->create(EditCustomizeForm::class, [
                'id' => $this->getIdParameter(),
                'reference' => $this->getReference(),
                'amount' => $this->getAmount(),
                'action' => $this->generateUrl('admin_app_transaction_customize',['id' => $this->getIdParameter()])
            ], array(
                'action' => $this->generateUrl('admin_app_transaction_customize',['id' => $this->getIdParameter()]),
                'method' => 'POST',
                'attr' => array(
                    'id' => $id
                )));*/

        return $form;
     /* return   $this->createForm(EditCustomizeForm::class,
        [
        'id' => $this->getIdParameter(),
        'reference' => $this->getReference(),
        'amount' => $this->getAmount(),
        'action' => $this->generateUrl('admin_app_transaction_customize',['id' => $id])
        ],
        array(
        'action' => $this->generateUrl('admin_app_transaction_customize',['id' => $id]),
        'method' => 'POST',
        'attr' => array(
        'id' => $id
        )));*/
    }

}